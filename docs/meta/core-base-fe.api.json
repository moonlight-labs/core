{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.36.3",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@moonlight-labs/core-base-fe!",
  "docComment": "",
  "name": "@moonlight-labs/core-base-fe",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@moonlight-labs/core-base-fe!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!clickToCopy:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "clickToCopy: "
            },
            {
              "kind": "Content",
              "text": "{\n    onClick: (element: "
            },
            {
              "kind": "Reference",
              "text": "React.MouseEvent",
              "canonicalReference": "@types/react!React.MouseEvent:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLButtonElement",
              "canonicalReference": "!HTMLButtonElement:interface"
            },
            {
              "kind": "Content",
              "text": ">) => void;\n    className: string;\n}"
            }
          ],
          "fileUrlPath": "dist/react-admin/fields/clickToCopy.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "clickToCopy",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!DateField:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DateField: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "DateFieldProps",
              "canonicalReference": "ra-ui-materialui!DateFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "fileUrlPath": "dist/react-admin/fields/DateField.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DateField",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!ExternalLink:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ExternalLink: "
            },
            {
              "kind": "Content",
              "text": "({ url, title, hideIcon, sx, }: {\n    url: string;\n    title: string;\n    sx?: object | undefined;\n    hideIcon?: boolean | undefined;\n}) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/components/ExternalLink.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ExternalLink",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@moonlight-labs/core-base-fe!generateTimeZoneOptions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateTimeZoneOptions(): "
            },
            {
              "kind": "Reference",
              "text": "TimeZoneOption",
              "canonicalReference": "@moonlight-labs/core-base-fe!~TimeZoneOption:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/react-admin/inputs/TimezoneSelectInput.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "generateTimeZoneOptions"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!MoneyField:var",
          "docComment": "/**\n * React Admin Field that supports editing a currency value.\n *\n * @component\n *\n * @example\n *\n * return ( <MoneyField source='price' /> )\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MoneyField: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "MoneyFieldProps",
              "canonicalReference": "@moonlight-labs/core-base-fe!~MoneyFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "fileUrlPath": "dist/react-admin/fields/MoneyField.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MoneyField",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!MoneyInput:var",
          "docComment": "/**\n * React Admin Field that supports editing a currency value.\n *\n * @component\n *\n * @example\n *\n * return ( <MoneyField source='price' /> )\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MoneyInput: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "InputProps",
              "canonicalReference": "ra-core!InputProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/react-admin/inputs/MoneyInput.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "MoneyInput",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!PolymorphicReferenceField:var",
          "docComment": "/**\n * React Admin Field that renders a Rails-style polymorphic relationship\n *\n * @component\n *\n * @example\n *\n * return ( <PolymorphicReferenceField source='author' /> )\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PolymorphicReferenceField: "
            },
            {
              "kind": "Content",
              "text": "({ source, }: "
            },
            {
              "kind": "Reference",
              "text": "PolymorphicReferenceFieldProps",
              "canonicalReference": "@moonlight-labs/core-base-fe!~PolymorphicReferenceFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "fileUrlPath": "dist/react-admin/fields/PolymorphicReferenceField.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "PolymorphicReferenceField",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!StatusInput:var",
          "docComment": "/**\n * React Admin Field that updating a status value via permitted state transition events.\n *\n * @component\n *\n * @example\n *\n * <StatusInput source='status' />\n *\n * @example\n *\n * Usage in a DataGrid as an editable column <WrapperField label='status'> <StatusInput source=\"status\" label={false} /> </WrapperField>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StatusInput: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "FormGroupProps",
              "canonicalReference": "@mui/material!FormGroupProps:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "CommonInputProps",
              "canonicalReference": "ra-ui-materialui!CommonInputProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "fileUrlPath": "dist/react-admin/inputs/StatusInput.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "StatusInput",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!timeAgo:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "timeAgo: "
            },
            {
              "kind": "Content",
              "text": "(timestamp: string) => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "fileUrlPath": "dist/react-admin/fields/TimeAgoField.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "timeAgo",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!TimeAgoField:var",
          "docComment": "/**\n * React Admin Field that renders a timestamp relative to the current time. For example: - 2 hours ago - 12 minutes from now The full timestamp is available as a tooltip.\n *\n * @component\n *\n * @example\n *\n * return ( <TimeAgoField source='created_at' /> )\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TimeAgoField: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "FieldProps",
              "canonicalReference": "ra-ui-materialui!FieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "fileUrlPath": "dist/react-admin/fields/TimeAgoField.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TimeAgoField",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@moonlight-labs/core-base-fe!TimezoneSelectInput:var",
          "docComment": "/**\n * React Admin Input that allows user to select a timezone. ' Input provides the current timezone as a first option and autocomplete to quickly find your local timezone.\n *\n * @component\n *\n * @example\n *\n * return ( <TimezoneSelectInput source='timezone' /> )\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TimezoneSelectInput: "
            },
            {
              "kind": "Content",
              "text": "(props: "
            },
            {
              "kind": "Reference",
              "text": "AutocompleteInputProps",
              "canonicalReference": "ra-ui-materialui!AutocompleteInputProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/react-admin/inputs/TimezoneSelectInput.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "TimezoneSelectInput",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@moonlight-labs/core-base-fe!ToggleButtonInput:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ToggleButtonInput(props: "
            },
            {
              "kind": "Reference",
              "text": "ToggleButtonGroupInputProps",
              "canonicalReference": "@moonlight-labs/core-base-fe!~ToggleButtonGroupInputProps:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/react-admin/inputs/ToggleButtonInput.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "ToggleButtonInput"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@moonlight-labs/core-base-fe!ToggleButtonInput:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace ToggleButtonInput "
            }
          ],
          "fileUrlPath": "dist/react-admin/inputs/ToggleButtonInput.d.ts",
          "releaseTag": "Public",
          "name": "ToggleButtonInput",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@moonlight-labs/core-base-fe!ToggleButtonInput.propTypes:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "propTypes: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        choices: "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.Requireable",
                  "canonicalReference": "@types/prop-types!Requireable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any[]>;\n        label: "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.Requireable",
                  "canonicalReference": "@types/prop-types!Requireable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<string | boolean | "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.ReactElementLike",
                  "canonicalReference": "@types/prop-types!ReactElementLike:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null | undefined>>;\n        options: "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.Requireable",
                  "canonicalReference": "@types/prop-types!Requireable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<object>;\n        optionText: "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.Requireable",
                  "canonicalReference": "@types/prop-types!Requireable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<string | "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.ReactElementLike",
                  "canonicalReference": "@types/prop-types!ReactElementLike:interface"
                },
                {
                  "kind": "Content",
                  "text": " | ((...args: any[]) => any) | null | undefined>>;\n        optionValue: "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.Requireable",
                  "canonicalReference": "@types/prop-types!Requireable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>;\n        resource: "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.Requireable",
                  "canonicalReference": "@types/prop-types!Requireable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>;\n        source: "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.Requireable",
                  "canonicalReference": "@types/prop-types!Requireable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>;\n        translateChoice: "
                },
                {
                  "kind": "Reference",
                  "text": "PropTypes.Requireable",
                  "canonicalReference": "@types/prop-types!Requireable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>;\n    }"
                }
              ],
              "isReadonly": false,
              "releaseTag": "Public",
              "name": "propTypes",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 26
              }
            }
          ]
        }
      ]
    }
  ]
}
